{
  "address": "0x8dCcF8BceECc41009FC57415592eE23497D32975",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "companyName",
          "type": "string"
        }
      ],
      "name": "ReservationContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "ReservationContractRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_companyName",
          "type": "string"
        }
      ],
      "name": "createReservationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployedContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "companyName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDeployedContracts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "companyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "companyName",
              "type": "string"
            }
          ],
          "internalType": "struct ReservationFactory.ReservationContract[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "revokeReservationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9cc5c3eef02e8e3ef1033eab05a715be861bf379f9bd7ffcfbda2abf1459693",
  "receipt": {
    "to": null,
    "from": "0xF3488798b008aCc4eb45625df2c3091EEA9a1d23",
    "contractAddress": "0x8dCcF8BceECc41009FC57415592eE23497D32975",
    "transactionIndex": 37,
    "gasUsed": "4753859",
    "logsBloom": "0x
    "blockHash": "0xd475fdc81cf97888d09ac4302891f081768ff83d1bfcbcc94874ac2f0b5ea63a",
    "transactionHash": "0xc9cc5c3eef02e8e3ef1033eab05a715be861bf379f9bd7ffcfbda2abf1459693",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 6028005,
        "transactionHash": "0xc9cc5c3eef02e8e3ef1033eab05a715be861bf379f9bd7ffcfbda2abf1459693",
        "address": "0x8dCcF8BceECc41009FC57415592eE23497D32975",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f3488798b008acc4eb45625df2c3091eea9a1d23"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0xd475fdc81cf97888d09ac4302891f081768ff83d1bfcbcc94874ac2f0b5ea63a"
      }
    ],
    "blockNumber": 6028005,
    "cumulativeGasUsed": "9745316",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e579c97d9b6a4be10e302f1a8d892d1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"}],\"name\":\"ReservationContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"ReservationContractRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_companyName\",\"type\":\"string\"}],\"name\":\"createReservationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDeployedContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"}],\"internalType\":\"struct ReservationFactory.ReservationContract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"revokeReservationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@YanVictorSN\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeReservationContract(address)\":{\"params\":{\"contractAddress\":\"The address of the contract to revoke\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Reservation Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ReservationContractDeployed(address,address,string)\":{\"notice\":\"Events///\"}},\"kind\":\"user\",\"methods\":{\"createReservationContract(string)\":{\"notice\":\"Creates a new Reservation contract for each company\"},\"deployedContracts(address)\":{\"notice\":\"Variables///\"},\"getAllContracts()\":{\"notice\":\"Returns all contracts deployed\"},\"getAllDeployedContracts()\":{\"notice\":\"Returns detailed information of all deployed contracts\"},\"revokeReservationContract(address)\":{\"notice\":\"Revokes a deployed reservation contract\"}},\"notice\":\"This contract is a factory for the Reservation NFTs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReservationFactory.sol\":\"ReservationFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Reservation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity 0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\n/////////////\\n///Imports///\\n/////////////\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { ERC721URIStorage } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\n/// @title Reservation NFT's\\n/// @author @YanVictorSN\\n/// @notice You can use this contract to mint and set NFT's metadata for reservations.\\ncontract Reservation is ERC721, ERC721URIStorage, Ownable, FunctionsClient {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\t// State variables to store the last request ID, response, and error\\n\\tbytes32 public s_lastRequestId;\\n\\tbytes public s_lastResponse;\\n\\tbytes public s_lastError;\\n\\n\\t// Custom error type\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\t// Event to log responses\\n\\tevent Response(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tstring character,\\n\\t\\tbytes response,\\n\\t\\tbytes err\\n\\t);\\n\\n\\t////////////////\\n\\t///Data Types///\\n\\t////////////////\\n\\n\\t/// @notice This enum is used to define the status of a reservation\\n\\tenum Status {\\n\\t\\tReserved,\\n\\t\\tCheckIn,\\n\\t\\tCanceled\\n\\t}\\n\\n\\t/// @notice This struct is used to define an reservation ID and status for an reservation\\n\\tstruct ReservationData {\\n\\t\\tuint256 reservationId;\\n\\t\\tuint256 reservationTimestamp;\\n\\t\\tuint256 toleranceTime;\\n\\t\\tuint256 reservationValue;\\n\\t\\tbool reservationPayment;\\n\\t\\tStatus status;\\n\\t}\\n\\n\\t/// @notice This struct is used to define an reservation ID and status for an reservation\\n\\tstruct ReservationByDay {\\n\\t\\tuint256 reservationTimestamp;\\n\\t\\taddress userAddress;\\n\\t\\tuint256 reservationId;\\n\\t}\\n\\n\\t///////////////\\n\\t///Variables///\\n\\t///////////////\\n\\n\\tusing Counters for Counters.Counter;\\n\\n\\tCounters.Counter private tokenIdCounter;\\n\\n\\taddress router = 0xb83E47C2bC239B3bf370bc41e1459A34b41238D0;\\n\\tuint64 subscriptionId = 3000;\\n\\tstring public character;\\n\\tuint32 gasLimit = 300000;\\n\\n\\tbytes32 donID =\\n\\t\\t0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000;\\n\\n\\tstring[] private IpfsImage = [\\n\\t\\t\\\"https://bafybeiazphqjm6gaplxtgxptjyhk3qau2w5vg2sijwpijtq6gtmkikhzxe.ipfs.w3s.link/RestaurantReservation.json\\\",\\n\\t\\t\\\"https://bafybeiafomlk5ebetu4dqjmxz2qp2xze6xcgir3v3nd2xlz3d2hjce2xcu.ipfs.w3s.link/RestauranReservationCheckedIn.json\\\",\\n\\t\\t\\\"https://bafybeiab3idohdokghdzmjapoyee3haoylhiuaekpf6s4gvpm6dtxioanq.ipfs.w3s.link/RestaurantReservantionCanceled.json\\\"\\n\\t];\\n\\n\\tstring source =\\n\\t\\t\\\"const reservationId = args[0];\\\"\\n\\t\\t\\\"const reservationTimestamp = args[1];\\\"\\n\\t\\t\\\"const tableNumber = args[2];\\\"\\n\\t\\t\\\"const reservationDate = args[3];\\\"\\n\\t\\t\\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\n\\t\\t\\\"url: `https://linkatable-yanvictorsns-projects.vercel.app/api/reservationsById?id=${reservationId}&reservationTimestamp=${reservationTimestamp}&tableNumber=${tableNumber}&reservationDate=${reservationDate}`\\\"\\n\\t\\t\\\"});\\\"\\n\\t\\t\\\"if (apiResponse.error) {\\\"\\n\\t\\t\\\"console.error(apiResponse.error);\\\"\\n\\t\\t\\\"throw new Error('Request failed');\\\"\\n\\t\\t\\\"}\\\"\\n\\t\\t\\\"const { data } = apiResponse;\\\"\\n\\t\\t\\\"console.log('API response data:', JSON.stringify(data, null, 2));\\\"\\n\\t\\t\\\"const encodedTimestamp = Functions.encodeString(data.reservationTimestamp);\\\"\\n\\t\\t\\\"const encodedTableNumber = Functions.encodeString(data.reservationTableNumber);\\\"\\n\\t\\t\\\"return encodedTimestamp\\\";\\n\\n\\tmapping(address => ReservationData[]) private reservationToken;\\n\\tmapping(uint256 => ReservationByDay[]) private reservationsByDay;\\n\\n\\t////////////\\n\\t///Events///\\n\\t////////////\\n\\n\\tevent ReservationDataAdded(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 reservationTimestamp,\\n\\t\\tuint256 toleranceTime,\\n\\t\\tuint256 reservationValue\\n\\t);\\n\\n\\tevent ReservationChecked(\\n\\t\\taddress indexed to,\\n\\t\\tuint256 tokenId,\\n\\t\\tStatus status,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tevent ReservationCanceled(\\n\\t\\taddress indexed to,\\n\\t\\tuint256 tokenId,\\n\\t\\tStatus status,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\t/////////////////\\n\\t///Constructor///\\n\\t/////////////////\\n\\n\\tconstructor() ERC721(\\\"Reserve\\\", \\\"RSV\\\") Ownable() FunctionsClient(router) {}\\n\\n\\t///////////////\\n\\t///Functions///\\n\\t///////////////\\n\\n\\t//////////////\\n\\t///External///\\n\\t//////////////\\n\\n\\t/// @notice This function is used to check all daily reservations\\n\\tfunction checkAllDailyReservation() external onlyOwner {\\n\\t\\tif (\\n\\t\\t\\treservationsByDay[getStartOfDayTimestamp(block.timestamp)].length >\\n\\t\\t\\t0\\n\\t\\t) {\\n\\t\\t\\tfor (\\n\\t\\t\\t\\tuint256 i = 0;\\n\\t\\t\\t\\ti <\\n\\t\\t\\t\\treservationsByDay[getStartOfDayTimestamp(block.timestamp)]\\n\\t\\t\\t\\t\\t.length;\\n\\t\\t\\t\\t++i\\n\\t\\t\\t) {\\n\\t\\t\\t\\tReservationByDay memory reservation = reservationsByDay[\\n\\t\\t\\t\\t\\tgetStartOfDayTimestamp(block.timestamp)\\n\\t\\t\\t\\t][i];\\n\\t\\t\\t\\tcheckDailyReservation(\\n\\t\\t\\t\\t\\treservation.reservationId,\\n\\t\\t\\t\\t\\treservation.userAddress\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t////////////\\n\\t///Public///\\n\\t////////////\\n\\n\\t/// @notice This function will mint a NFT, add an reservation on the array and set the metadata.\\n\\t/// @param minterAddress The address that will receive the NFT\\n\\t//@param tokenMetadata The metadata of the NFT\\n\\t/// @param reservationTimestamp The timestamp of the reservation\\n\\t/// @param reservationToleranceTime The tolerance time of the reservation\\n\\t/// @param reservationValue The value of the reservation\\n\\tfunction safeMint(\\n\\t\\taddress minterAddress,\\n\\t\\tuint256 reservationTimestamp,\\n\\t\\tuint256 reservationToleranceTime,\\n\\t\\tuint256 reservationValue //string memory tokenMetadata //onlyOwner\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\treservationTimestamp > block.timestamp,\\n\\t\\t\\t\\\"Reservation timestamp must be in the future\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.value >= reservationValue,\\n\\t\\t\\t\\\"Insufficient funds to cover minting price\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\treservationToleranceTime > 0,\\n\\t\\t\\t\\\"Tolerance time must be greater than 0\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\treservationValue > 0,\\n\\t\\t\\t\\\"Reservation value must be greater than 0\\\"\\n\\t\\t);\\n\\t\\trequire(minterAddress != address(0), \\\"Insert a valid address\\\");\\n\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\t\\ttokenIdCounter.increment();\\n\\t\\tuint256 finalToleranceTime = reservationTimestamp +\\n\\t\\t\\treservationToleranceTime;\\n\\t\\t//This line is only for test propuses, it will be removed when we set the marketplace\\n\\t\\t//reservationToken[minterAddress][tokenId].status = Status.Reserved;\\n\\t\\t_addReservation(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tminterAddress,\\n\\t\\t\\treservationTimestamp,\\n\\t\\t\\tfinalToleranceTime,\\n\\t\\t\\treservationValue\\n\\t\\t);\\n\\t\\t_safeMint(minterAddress, tokenId);\\n\\t\\t_setTokenURI(tokenId, IpfsImage[0]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sends an HTTP request for character information\\n\\t * @param args The arguments to pass to the HTTP request\\n\\t * @return requestId The ID of the request\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\tstring[] calldata args\\n\\t) external returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code\\n\\t\\tif (args.length > 0) req.setArgs(args); // Set the arguments for the request\\n\\n\\t\\t// Send the request and store the request ID\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Callback function for fulfilling a request\\n\\t * @param requestId The ID of the request to fulfill\\n\\t * @param response The HTTP response data\\n\\t * @param err Any errors from the Functions request\\n\\t */\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId); // Check if request IDs match\\n\\t\\t}\\n\\t\\t// Update the contract's state variables with the response and any errors\\n\\t\\ts_lastResponse = response;\\n\\t\\tcharacter = string(response);\\n\\t\\ts_lastError = err;\\n\\n\\t\\t// Emit an event to log the response\\n\\t\\temit Response(requestId, character, s_lastResponse, s_lastError);\\n\\t}\\n\\n\\t/// @notice This function get the metadata of a NFT\\n\\t/// @param tokenId The identifier of the NFT\\n\\t/// @return The metadata of the NFT\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\treturn super.tokenURI(tokenId);\\n\\t}\\n\\n\\tfunction tokenURIs(\\n\\t\\tuint256[] memory tokenIds\\n\\t) public view returns (string[] memory) {\\n\\t\\tstring[] memory uris = new string[](tokenIds.length);\\n\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\turis[i] = tokenURI(tokenIds[i]);\\n\\t\\t}\\n\\n\\t\\treturn uris;\\n\\t}\\n\\n\\t/// @notice This function is used to check if a contract supports an interface\\n\\t/// @param interfaceId The interface identifier\\n\\t/// @return True if the interface is supported, false otherwise\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (bool) {\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @notice This function is used to check the daily reservations and modifies the status of each one\\n\\t/// @param tokenId The identifier of the NFT\\n\\t/// @param userAddress The address to be checked\\n\\tfunction checkDailyReservation(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress userAddress //string memory newTokenMetadata //onlyOwner\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\treservationToken[userAddress].length > 0,\\n\\t\\t\\t\\\"User don't have any reservation\\\"\\n\\t\\t);\\n\\n\\t\\tReservationData storage _reservation = reservationToken[userAddress][\\n\\t\\t\\ttokenId\\n\\t\\t];\\n\\t\\tif (_reservation.toleranceTime < block.timestamp) {\\n\\t\\t\\t_cancelReservation(_reservation, tokenId, userAddress);\\n\\t\\t\\treturn;\\n\\t\\t} else {\\n\\t\\t\\t_confirmCheckIn(_reservation, tokenId, userAddress);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _cancelReservation(\\n\\t\\tReservationData storage _reservation,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress userAddress\\n\\t) internal {\\n\\t\\t_reservation.status = Status.Canceled;\\n\\t\\t_setTokenURI(tokenId, IpfsImage[2]);\\n\\t\\t///refundForNotCheckIn(tokenId, userAddress);\\n\\t\\temit ReservationCanceled(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\ttokenId,\\n\\t\\t\\tStatus.Canceled,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _confirmCheckIn(\\n\\t\\tReservationData storage _reservation,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress userAddress\\n\\t) internal {\\n\\t\\t_reservation.status = Status.CheckIn;\\n\\t\\t_setTokenURI(tokenId, IpfsImage[1]);\\n\\t\\temit ReservationChecked(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\ttokenId,\\n\\t\\t\\tStatus.CheckIn,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function is used to get the data of a token\\n\\t/// @param _userAddress The address of the user\\n\\tfunction getTokenData(\\n\\t\\taddress _userAddress\\n\\t) public view returns (ReservationData[] memory) {\\n\\t\\treturn reservationToken[_userAddress];\\n\\t}\\n\\n\\t//////////////\\n\\t///Internal///\\n\\t//////////////\\n\\n\\t/// @notice This function is used to burn a NFT\\n\\t/// @param tokenId The identifier of the NFT\\n\\tfunction _burn(\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721, ERC721URIStorage) {\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n\\t/// @notice This function add an reservation to the ReservationData, set the status to Reserved and add the reservation to the daily reservations\\n\\t/// @param reservationId The identifier of the reservation\\n\\t/// @param userAddress The address of the user that purschased the reservation\\n\\t/// @param reservationTimestamp The timestamp of the reservation\\n\\t/// @param toleranceTime The tolerance time of the reservation\\n\\t/// @param reservationValue The value of the reservation\\n\\tfunction _addReservation(\\n\\t\\tuint256 reservationId,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 reservationTimestamp,\\n\\t\\tuint256 toleranceTime,\\n\\t\\tuint256 reservationValue\\n\\t) internal {\\n\\t\\tReservationData memory newReservation = ReservationData(\\n\\t\\t\\treservationId,\\n\\t\\t\\treservationTimestamp,\\n\\t\\t\\ttoleranceTime,\\n\\t\\t\\treservationValue,\\n\\t\\t\\tfalse,\\n\\t\\t\\tStatus.Reserved\\n\\t\\t);\\n\\n\\t\\treservationToken[userAddress].push(newReservation);\\n\\t\\tuint256 reservationDay = getStartOfDayTimestamp(reservationTimestamp);\\n\\n\\t\\tReservationByDay memory newReservationDay = ReservationByDay(\\n\\t\\t\\treservationTimestamp,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\treservationId\\n\\t\\t);\\n\\n\\t\\treservationsByDay[reservationDay].push(newReservationDay);\\n\\t\\temit ReservationDataAdded(\\n\\t\\t\\treservationId,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\treservationTimestamp,\\n\\t\\t\\ttoleranceTime,\\n\\t\\t\\treservationValue\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function is used to get the timestamp of start of the day\\n\\t/// @param _reservationTimestamp The timestamp of the reservation\\n\\t/// @return The timestamp of start of the day\\n\\tfunction getStartOfDayTimestamp(\\n\\t\\tuint256 _reservationTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn _reservationTimestamp - (_reservationTimestamp % 86400);\\n\\t}\\n\\n\\t///@notice This function is used to deposit the reservation value in the contract\\n\\t///@param reservationId The identifier of the reservation\\n\\t///@param userAddress The address of the user that rented the reservation\\n\\tfunction depositReservationValue(\\n\\t\\tuint256 reservationId,\\n\\t\\taddress userAddress\\n\\t) public payable {\\n\\t\\tReservationData storage userReservation = reservationToken[msg.sender][\\n\\t\\t\\treservationId\\n\\t\\t];\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == userAddress,\\n\\t\\t\\t\\\"Only the reservation holder can deposit\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.value == userReservation.reservationValue,\\n\\t\\t\\t\\\"Deposit value must be equal to reservation value\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t!userReservation.reservationPayment,\\n\\t\\t\\t\\\"Reservation already paid\\\"\\n\\t\\t);\\n\\t\\tuserReservation.reservationPayment = true;\\n\\t}\\n\\n\\t///@notice This function is used to refund the reservation value in the contract\\n\\t///@param reservationId The identifier of the reservation\\n\\t///@param userAddress The address of the user that rented the reservation\\n\\tfunction refundForNotCheckIn(\\n\\t\\tuint256 reservationId,\\n\\t\\taddress userAddress\\n\\t) public {\\n\\t\\tReservationData storage userReservation = reservationToken[userAddress][\\n\\t\\t\\treservationId\\n\\t\\t];\\n\\t\\trequire(\\n\\t\\t\\taddress(this).balance >= userReservation.reservationValue,\\n\\t\\t\\t\\\"Insufficient balance\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuserReservation.status == Status.Canceled,\\n\\t\\t\\t\\\"Reservation must be canceled\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuserReservation.reservationPayment,\\n\\t\\t\\t\\\"Reservation must be paid to refund\\\"\\n\\t\\t);\\n\\t\\tpayable(address(this)).transfer(userReservation.reservationValue);\\n\\t}\\n\\n\\t/// @notice  This function is used to get the daily reservations\\n\\t/// @param _dayTimestamp The timestamp of the day\\n\\t/// @return The daily reservations\\n\\tfunction getReservationsByDay(\\n\\t\\tuint256 _dayTimestamp\\n\\t) public view returns (ReservationByDay[] memory) {\\n\\t\\treturn reservationsByDay[_dayTimestamp];\\n\\t}\\n\\n\\tfunction getReservations(\\n\\t\\taddress _userAddress\\n\\t) public view returns (ReservationData[] memory) {\\n\\t\\treturn reservationToken[_userAddress];\\n\\t}\\n\\n\\tfunction getDateMaxToTrade(uint256 _tokenId) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\treservationToken[msg.sender][_tokenId].reservationTimestamp +\\n\\t\\t\\t30 days;\\n\\t}\\n\\n\\t/// @notice This function returns an array of reservation tokens for an array of addresses\\n\\t/// @param addresses The array of addresses to query\\n\\t/// @return An array of reservation tokens corresponding to the addresses\\n\\tfunction getReservationTokensByAddresses(\\n\\t\\taddress[] calldata addresses\\n\\t) public view returns (ReservationData[][] memory) {\\n\\t\\tReservationData[][] memory reservations = new ReservationData[][](\\n\\t\\t\\taddresses.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < addresses.length; i++) {\\n\\t\\t\\treservations[i] = reservationToken[addresses[i]];\\n\\t\\t}\\n\\n\\t\\treturn reservations;\\n\\t}\\n}\\n\",\"keccak256\":\"0x89bfc0090a4094ad3651a74b282755287c399b01e8648dcf28d1a2c43965a1f0\",\"license\":\"MIT\"},\"contracts/ReservationFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/////////////\\r\\n///Imports///\\r\\n/////////////\\r\\n\\r\\nimport { Reservation } from \\\"./Reservation.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title Reservation Factory\\r\\n/// @author @YanVictorSN\\r\\n/// @notice This contract is a factory for the Reservation NFTs\\r\\ncontract ReservationFactory is Ownable {\\r\\n\\t////////////////\\r\\n\\t///Data Types///\\r\\n\\t////////////////\\r\\n\\r\\n\\tstruct ReservationContract {\\r\\n\\t\\taddress companyAddress;\\r\\n\\t\\taddress contractAddress;\\r\\n\\t\\tstring companyName;\\r\\n\\t}\\r\\n\\r\\n\\t///////////////\\r\\n\\t///Variables///\\r\\n\\t///////////////\\r\\n\\r\\n\\tmapping(address => ReservationContract) public deployedContracts;\\r\\n\\taddress[] public allContracts;\\r\\n\\r\\n\\t////////////\\r\\n\\t///Events///\\r\\n\\t////////////\\r\\n\\r\\n\\tevent ReservationContractDeployed(\\r\\n\\t\\taddress indexed contractAddress,\\r\\n\\t\\taddress indexed companyAddress,\\r\\n\\t\\tstring companyName\\r\\n\\t);\\r\\n\\r\\n\\tevent ReservationContractRevoked(\\r\\n\\t\\taddress indexed contractAddress,\\r\\n\\t\\taddress indexed companyAddress\\r\\n\\t);\\r\\n\\r\\n\\t///////////////\\r\\n\\t///Functions///\\r\\n\\t///////////////\\r\\n\\r\\n\\t////////////\\r\\n\\t///Public///\\r\\n\\t////////////\\r\\n\\r\\n\\t///@notice Creates a new Reservation contract for each company\\r\\n\\tfunction createReservationContract(string memory _companyName) public {\\r\\n\\t\\tReservation newReservationContract = new Reservation();\\r\\n\\t\\taddress contractAddress = address(newReservationContract);\\r\\n\\r\\n\\t\\tdeployedContracts[contractAddress] = ReservationContract({\\r\\n\\t\\t\\tcompanyAddress: msg.sender,\\r\\n\\t\\t\\tcontractAddress: contractAddress,\\r\\n\\t\\t\\tcompanyName: _companyName\\r\\n\\t\\t});\\r\\n\\t\\tallContracts.push(contractAddress);\\r\\n\\r\\n\\t\\temit ReservationContractDeployed(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\tcontractAddress,\\r\\n\\t\\t\\t_companyName\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Revokes a deployed reservation contract\\r\\n\\t/// @param contractAddress The address of the contract to revoke\\r\\n\\tfunction revokeReservationContract(\\r\\n\\t\\taddress contractAddress\\r\\n\\t) public onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tdeployedContracts[contractAddress].contractAddress != address(0),\\r\\n\\t\\t\\t\\\"Contract does not exist\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\taddress companyAddress = deployedContracts[contractAddress]\\r\\n\\t\\t\\t.companyAddress;\\r\\n\\t\\tdelete deployedContracts[contractAddress];\\r\\n\\t\\tremoveContractFromArray(contractAddress);\\r\\n\\r\\n\\t\\temit ReservationContractRevoked(contractAddress, companyAddress);\\r\\n\\t}\\r\\n\\r\\n\\t///@notice Returns all contracts deployed\\r\\n\\tfunction getAllContracts() public view returns (address[] memory) {\\r\\n\\t\\treturn allContracts;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns detailed information of all deployed contracts\\r\\n\\tfunction getAllDeployedContracts()\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (ReservationContract[] memory)\\r\\n\\t{\\r\\n\\t\\tuint256 length = allContracts.length;\\r\\n\\t\\tReservationContract[]\\r\\n\\t\\t\\tmemory allDeployedContracts = new ReservationContract[](length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\r\\n\\t\\t\\taddress contractAddress = allContracts[i];\\r\\n\\t\\t\\tallDeployedContracts[i] = deployedContracts[contractAddress];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn allDeployedContracts;\\r\\n\\t}\\r\\n\\r\\n\\t/////////////\\r\\n\\t///Private///\\r\\n\\t/////////////\\r\\n\\r\\n\\t/// @notice Helper function to remove a contract address from the array\\r\\n\\t/// @param contractAddress The address of the contract to remove\\r\\n\\tfunction removeContractFromArray(address contractAddress) private {\\r\\n\\t\\tuint256 length = allContracts.length;\\r\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\r\\n\\t\\t\\tif (allContracts[i] == contractAddress) {\\r\\n\\t\\t\\t\\tallContracts[i] = allContracts[length - 1];\\r\\n\\t\\t\\t\\tallContracts.pop();\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2289091c98675b648c284d9c18c3f5521a02bdb49764f67bd1131087f0fd216e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61549c8061007e6000396000f3fe60806040523480156200001157600080fd5b50600436106200009f5760003560e01c8063715018a6116200006e578063715018a6146200010f5780638da5cb5b1462000119578063c70242ad146200013f578063e54e26b91462000167578063f2fde38b146200017e57600080fd5b806318d3ce9614620000a45780633367db8214620000c65780633d0c13b214620000df5780636c9364b214620000f6575b600080fd5b620000ae62000195565b604051620000bd9190620009b9565b60405180910390f35b620000dd620000d736600462000a1e565b620001f9565b005b620000dd620000f036600462000ad9565b62000334565b6200010062000449565b604051620000bd919062000b53565b620000dd62000609565b6000546001600160a01b03165b6040516001600160a01b039091168152602001620000bd565b620001566200015036600462000ad9565b62000621565b604051620000bd9392919062000be2565b620001266200017836600462000c19565b620006e3565b620000dd6200018f36600462000ad9565b6200070e565b60606002805480602002602001604051908101604052809291908181526020018280548015620001ef57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001d0575b5050505050905090565b6000604051620002099062000957565b604051809103906000f08015801562000226573d6000803e3d6000fd5b50604080516060810182523381526001600160a01b038084166020808401828152848601898152600093845260019283905295909220845181549085166001600160a01b031991821617825592519181018054929094169190921617909155915192935083929091906002820190620002a0908262000cc1565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03841690811790915560405190915033907f2ccdca3e1b0543a98b533de078884ff23cf13b32f4bd118fd6afa824728e30a7906200032790879062000d8e565b60405180910390a3505050565b6200033e6200078d565b6001600160a01b038181166000908152600160208190526040909120015416620003af5760405162461bcd60e51b815260206004820152601760248201527f436f6e747261637420646f6573206e6f7420657869737400000000000000000060448201526064015b60405180910390fd5b6001600160a01b038082166000908152600160208190526040822080546001600160a01b03198082168355928201805490931690925592169190620003f8600283018262000965565b50506200040582620007e9565b806001600160a01b0316826001600160a01b03167fa19b3707795056482a17062ff074776527d2f61e6e15a75576409c961cd7397460405160405180910390a35050565b60025460609060008167ffffffffffffffff8111156200046d576200046d62000a08565b604051908082528060200260200182016040528015620004bc57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816200048c5790505b50905060005b828110156200060257600060028281548110620004e357620004e362000da3565b60009182526020808320909101546001600160a01b03908116808452600180845260409485902085516060810187528154851681529181015490931693810193909352600282018054919550929391929184019190620005439062000c33565b80601f0160208091040260200160405190810160405280929190818152602001828054620005719062000c33565b8015620005c25780601f106200059657610100808354040283529160200191620005c2565b820191906000526020600020905b815481529060010190602001808311620005a457829003601f168201915b505050505081525050838381518110620005e057620005e062000da3565b6020026020010181905250508080620005f99062000dcf565b915050620004c2565b5092915050565b620006136200078d565b6200061f600062000907565b565b60016020819052600091825260409091208054918101546002820180546001600160a01b039485169490921692916200065a9062000c33565b80601f0160208091040260200160405190810160405280929190818152602001828054620006889062000c33565b8015620006d95780601f10620006ad57610100808354040283529160200191620006d9565b820191906000526020600020905b815481529060010190602001808311620006bb57829003601f168201915b5050505050905083565b60028181548110620006f457600080fd5b6000918252602090912001546001600160a01b0316905081565b620007186200078d565b6001600160a01b0381166200077f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003a6565b6200078a8162000907565b50565b6000546001600160a01b031633146200061f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003a6565b60025460005b818110156200090257826001600160a01b03166002828154811062000818576200081862000da3565b6000918252602090912001546001600160a01b031603620008ed5760026200084260018462000deb565b8154811062000855576200085562000da3565b600091825260209091200154600280546001600160a01b03909216918390811062000884576200088462000da3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480620008c657620008c662000e07565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b80620008f98162000dcf565b915050620007ef565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6146498062000e1e83390190565b508054620009739062000c33565b6000825580601f1062000984575050565b601f0160209004906000526020600020908101906200078a91905b80821115620009b557600081556001016200099f565b5090565b6020808252825182820181905260009190848201906040850190845b81811015620009fc5783516001600160a01b031683529284019291840191600101620009d5565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000a3157600080fd5b813567ffffffffffffffff8082111562000a4a57600080fd5b818401915084601f83011262000a5f57600080fd5b81358181111562000a745762000a7462000a08565b604051601f8201601f19908116603f0116810190838211818310171562000a9f5762000a9f62000a08565b8160405282815287602084870101111562000ab957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121562000aec57600080fd5b81356001600160a01b038116811462000b0457600080fd5b9392505050565b6000815180845260005b8181101562000b335760208185018101518683018201520162000b15565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101562000bd457888303603f19018552815180516001600160a01b039081168552888201511688850152860151606087850181905262000bbf8186018362000b0b565b96890196945050509086019060010162000b7a565b509098975050505050505050565b6001600160a01b0384811682528316602082015260606040820181905260009062000c109083018462000b0b565b95945050505050565b60006020828403121562000c2c57600080fd5b5035919050565b600181811c9082168062000c4857607f821691505b60208210810362000c6957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200090257600081815260208120601f850160051c8101602086101562000c985750805b601f850160051c820191505b8181101562000cb95782815560010162000ca4565b505050505050565b815167ffffffffffffffff81111562000cde5762000cde62000a08565b62000cf68162000cef845462000c33565b8462000c6f565b602080601f83116001811462000d2e576000841562000d155750858301515b600019600386901b1c1916600185901b17855562000cb9565b600085815260208120601f198616915b8281101562000d5f5788860151825594840194600190910190840162000d3e565b508582101562000d7e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600062000b04602083018462000b0b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000de45762000de462000db9565b5060010190565b8181038181111562000e015762000e0162000db9565b92915050565b634e487b7160e01b600052603160045260246000fdfe600c8054750bb8b83e47c2bc239b3bf370bc41e1459a34b41238d06001600160e01b0319909116179055600e805463ffffffff1916620493e01790557f66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000600f556101a0604052606c61010081815260a091829190620042046101203981526020016040518060a0016040528060748152602001620045d56074913981526020016040518060a001604052806075815260200162004560607591399052620000cb906010906003620001f1565b506040518061032001604052806102f08152602001620042706102f09139601190620000f890826200036d565b503480156200010657600080fd5b50600c5460408051808201825260078152665265736572766560c81b602080830191909152825180840190935260038352622929ab60e91b908301526001600160a01b03909216919060006200015d83826200036d565b5060016200016c82826200036d565b50505062000189620001836200019b60201b60201c565b6200019f565b6001600160a01b031660805262000439565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200023c579160200282015b828111156200023c57825182906200022b90826200036d565b509160200191906001019062000212565b506200024a9291506200024e565b5090565b808211156200024a5760006200026582826200026f565b506001016200024e565b5080546200027d90620002de565b6000825580601f106200028e575050565b601f016020900490600052602060002090810190620002ae9190620002b1565b50565b5b808211156200024a5760008155600101620002b2565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002f357607f821691505b6020821081036200031457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036857600081815260208120601f850160051c81016020861015620003435750805b601f850160051c820191505b8181101562000364578281556001016200034f565b5050505b505050565b81516001600160401b03811115620003895762000389620002c8565b620003a1816200039a8454620002de565b846200031a565b602080601f831160018114620003d95760008415620003c05750858301515b600019600386901b1c1916600185901b17855562000364565b600085815260208120601f198616915b828110156200040a57888601518255948401946001909101908401620003e9565b5085821015620004295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613da86200045c600039600081816108a20152611fb10152613da86000f3fe6080604052600436106101f95760003560e01c80636cc8d8cf1161010d578063b1e21749116100a0578063c87b56dd1161006f578063c87b56dd146105a9578063cfb5a921146105c9578063e985e9c5146105f6578063f2fde38b1461063f578063faa07ec11461065f57600080fd5b8063b1e217491461053e578063b88d4fde14610554578063b9d3ab8414610574578063bd4cf3501461059457600080fd5b80638d75aed6116100dc5780638d75aed6146104d85780638da5cb5b146104eb57806395d89b4114610509578063a22cb4651461051e57600080fd5b80636cc8d8cf146104565780636ff3043c1461048357806370a08231146104a3578063715018a6146104c357600080fd5b806323b872dd116101905780634c8f60a31161015f5780634c8f60a3146103b45780634d2e03a0146103d457806357b6f1a1146103e95780636352211e14610416578063642521c51461043657600080fd5b806323b872dd1461034a5780633944ea3a1461036a57806342842e0e1461037f5780634b0795a81461039f57600080fd5b8063095ea7b3116101cc578063095ea7b3146102bb5780630ca76175146102dd578063132a98c0146102fd57806313ff7e9f1461032a57600080fd5b806301ffc9a7146101fe5780630377153f1461023357806306fdde0314610261578063081812fc14610283575b600080fd5b34801561020a57600080fd5b5061021e6102193660046130bb565b610672565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e3660046130d8565b610683565b60405190815260200161022a565b34801561026d57600080fd5b506102766106c4565b60405161022a9190613141565b34801561028f57600080fd5b506102a361029e3660046130d8565b610756565b6040516001600160a01b03909116815260200161022a565b3480156102c757600080fd5b506102db6102d6366004613170565b61077d565b005b3480156102e957600080fd5b506102db6102f8366004613257565b610897565b34801561030957600080fd5b5061031d6103183660046132c3565b61091b565b60405161022a9190613393565b34801561033657600080fd5b5061031d6103453660046132c3565b6109fd565b34801561035657600080fd5b506102db6103653660046133a6565b610ad4565b34801561037657600080fd5b50610276610b05565b34801561038b57600080fd5b506102db61039a3660046133a6565b610b93565b3480156103ab57600080fd5b50610276610bae565b3480156103c057600080fd5b506102536103cf36600461342d565b610bbb565b3480156103e057600080fd5b50610276610cf7565b3480156103f557600080fd5b5061040961040436600461342d565b610d04565b60405161022a919061346e565b34801561042257600080fd5b506102a36104313660046130d8565b610ea7565b34801561044257600080fd5b506102db6104513660046134d0565b610f07565b34801561046257600080fd5b5061047661047136600461351f565b61108e565b60405161022a91906135b4565b34801561048f57600080fd5b506102db61049e3660046134d0565b611146565b3480156104af57600080fd5b506102536104be3660046132c3565b611207565b3480156104cf57600080fd5b506102db61128d565b6102db6104e63660046134d0565b6112a1565b3480156104f757600080fd5b506007546001600160a01b03166102a3565b34801561051557600080fd5b50610276611416565b34801561052a57600080fd5b506102db610539366004613609565b611425565b34801561054a57600080fd5b5061025360085481565b34801561056057600080fd5b506102db61056f366004613645565b611434565b34801561058057600080fd5b5061025361058f3660046130d8565b611466565b3480156105a057600080fd5b506102db61147f565b3480156105b557600080fd5b506102766105c43660046130d8565b611562565b3480156105d557600080fd5b506105e96105e43660046130d8565b61156d565b60405161022a91906136ac565b34801561060257600080fd5b5061021e61061136600461370e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561064b57600080fd5b506102db61065a3660046132c3565b6115f7565b6102db61066d366004613738565b61166d565b600061067d82611938565b92915050565b3360009081526012602052604081208054839081106106a4576106a4613771565b90600052602060002090600502016001015462278d0061067d919061379d565b6060600080546106d3906137b0565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff906137b0565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b5050505050905090565b60006107618261195d565b506000908152600460205260409020546001600160a01b031690565b600061078882610ea7565b9050806001600160a01b0316836001600160a01b0316036107fa5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061081657506108168133610611565b6108885760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107f1565b61089283836119bc565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e05760405163c6829f8360e01b815260040160405180910390fd5b6108eb838383611a2a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6001600160a01b0381166000908152601260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109f25760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a085019261010090920416908111156109ce576109ce6132de565b60028111156109df576109df6132de565b8152505081526020019060010190610953565b505050509050919050565b6001600160a01b0381166000908152601260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109f25760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a08501926101009092041690811115610ab057610ab06132de565b6002811115610ac157610ac16132de565b8152505081526020019060010190610a35565b610ade3382611aba565b610afa5760405162461bcd60e51b81526004016107f1906137ea565b610892838383611b39565b60098054610b12906137b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e906137b0565b8015610b8b5780601f10610b6057610100808354040283529160200191610b8b565b820191906000526020600020905b815481529060010190602001808311610b6e57829003601f168201915b505050505081565b61089283838360405180602001604052806000815250611434565b600a8054610b12906137b0565b6000610bfe6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610c9b60118054610c0e906137b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3a906137b0565b8015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b505050505082611c9d90919063ffffffff16565b8215610cb557610cb5610cae8486613837565b8290611caa565b610cea610cc182611cd4565b600c54600e54600f54600160a01b9092046001600160401b03169163ffffffff90911690611fac565b6008819055949350505050565b600d8054610b12906137b0565b60606000826001600160401b03811115610d2057610d2061319a565b604051908082528060200260200182016040528015610d5357816020015b6060815260200190600190039081610d3e5790505b50905060005b83811015610e9f5760126000868684818110610d7757610d77613771565b9050602002016020810190610d8c91906132c3565b6001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e6b5760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a08501926101009092041690811115610e4757610e476132de565b6002811115610e5857610e586132de565b8152505081526020019060010190610dcc565b50505050828281518110610e8157610e81613771565b60200260200101819052508080610e97906138be565b915050610d59565b509392505050565b6000818152600260205260408120546001600160a01b03168061067d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107f1565b6001600160a01b0381166000908152601260205260408120805484908110610f3157610f31613771565b906000526020600020906005020190508060030154471015610f8c5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016107f1565b60026004820154610100900460ff166002811115610fac57610fac6132de565b14610ff95760405162461bcd60e51b815260206004820152601c60248201527f5265736572766174696f6e206d7573742062652063616e63656c65640000000060448201526064016107f1565b600481015460ff166110585760405162461bcd60e51b815260206004820152602260248201527f5265736572766174696f6e206d757374206265207061696420746f20726566756044820152611b9960f21b60648201526084016107f1565b6003810154604051309180156108fc02916000818181858888f19350505050158015611088573d6000803e3d6000fd5b50505050565b6060600082516001600160401b038111156110ab576110ab61319a565b6040519080825280602002602001820160405280156110de57816020015b60608152602001906001900390816110c95790505b50905060005b835181101561113f5761110f84828151811061110257611102613771565b6020026020010151611562565b82828151811061112157611121613771565b60200260200101819052508080611137906138be565b9150506110e4565b5092915050565b6001600160a01b0381166000908152601260205260409020546111ab5760405162461bcd60e51b815260206004820152601f60248201527f5573657220646f6e2774206861766520616e79207265736572766174696f6e0060448201526064016107f1565b6001600160a01b03811660009081526012602052604081208054849081106111d5576111d5613771565b9060005260206000209060050201905042816002015410156111fc5761089281848461207e565b6108928184846120e8565b60006001600160a01b0382166112715760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107f1565b506001600160a01b031660009081526003602052604090205490565b611295612152565b61129f60006121ac565b565b3360009081526012602052604081208054849081106112c2576112c2613771565b90600052602060002090600502019050816001600160a01b0316336001600160a01b0316146113435760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746865207265736572766174696f6e20686f6c6465722063616e2060448201526619195c1bdcda5d60ca1b60648201526084016107f1565b806003015434146113af5760405162461bcd60e51b815260206004820152603060248201527f4465706f7369742076616c7565206d75737420626520657175616c20746f207260448201526f65736572766174696f6e2076616c756560801b60648201526084016107f1565b600481015460ff16156114045760405162461bcd60e51b815260206004820152601860248201527f5265736572766174696f6e20616c72656164792070616964000000000000000060448201526064016107f1565b600401805460ff191660011790555050565b6060600180546106d3906137b0565b6114303383836121fe565b5050565b61143e3383611aba565b61145a5760405162461bcd60e51b81526004016107f1906137ea565b611088848484846122cc565b600061147562015180836138d7565b61067d90836138f9565b611487612152565b60006013600061149642611466565b8152602081019190915260400160002054111561129f5760005b601360006114bd42611466565b815260208101919091526040016000205481101561155f576000601360006114e442611466565b8152602001908152602001600020828154811061150357611503613771565b60009182526020918290206040805160608101825260039093029091018054835260018101546001600160a01b03169383018490526002015490820181905290925061154e91611146565b50611558816138be565b90506114b0565b50565b606061067d826122ff565b606060136000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109f25760008481526020908190206040805160608101825260038602909201805483526001808201546001600160a01b0316848601526002909101549183019190915290835290920191016115a2565b6115ff612152565b6001600160a01b0381166116645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107f1565b61155f816121ac565b4283116116d05760405162461bcd60e51b815260206004820152602b60248201527f5265736572766174696f6e2074696d657374616d70206d75737420626520696e60448201526a207468652066757475726560a81b60648201526084016107f1565b803410156117325760405162461bcd60e51b815260206004820152602960248201527f496e73756666696369656e742066756e647320746f20636f766572206d696e74604482015268696e6720707269636560b81b60648201526084016107f1565b600082116117905760405162461bcd60e51b815260206004820152602560248201527f546f6c6572616e63652074696d65206d75737420626520677265617465722074604482015264068616e20360dc1b60648201526084016107f1565b600081116117f15760405162461bcd60e51b815260206004820152602860248201527f5265736572766174696f6e2076616c7565206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016107f1565b6001600160a01b0384166118405760405162461bcd60e51b8152602060048201526016602482015275496e7365727420612076616c6964206164647265737360501b60448201526064016107f1565b600061184b600b5490565b905061185b600b80546001019055565b6000611867848661379d565b90506118768287878487612407565b61188086836125c3565b61193082601060008154811061189857611898613771565b9060005260206000200180546118ad906137b0565b80601f01602080910402602001604051908101604052809291908181526020018280546118d9906137b0565b80156119265780601f106118fb57610100808354040283529160200191611926565b820191906000526020600020905b81548152906001019060200180831161190957829003601f168201915b50505050506125dd565b505050505050565b60006001600160e01b03198216632483248360e11b148061067d575061067d826126a8565b6000818152600260205260409020546001600160a01b031661155f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107f1565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119f182610ea7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b8260085414611a4f5760405163d068bf5b60e01b8152600481018490526024016107f1565b6009611a5b8382613952565b50600d611a688382613952565b50600a611a758282613952565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50600d6009600a604051611aad93929190613a8e565b60405180910390a2505050565b600080611ac683610ea7565b9050806001600160a01b0316846001600160a01b03161480611b0d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611b315750836001600160a01b0316611b2684610756565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b4c82610ea7565b6001600160a01b031614611b725760405162461bcd60e51b81526004016107f190613ad1565b6001600160a01b038216611bd45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107f1565b826001600160a01b0316611be782610ea7565b6001600160a01b031614611c0d5760405162461bcd60e51b81526004016107f190613ad1565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61143082600080846126f8565b8051600003611ccc5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000611ce3610100612776565b9050611d1c6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261279790919063ffffffff16565b8251611d3a906002811115611d3357611d336132de565b82906127b0565b6040805180820190915260088152676c616e677561676560c01b6020820152611d64908290612797565b6040830151611d7b908015611d3357611d336132de565b604080518082019091526006815265736f7572636560d01b6020820152611da3908290612797565b6060830151611db3908290612797565b60a08301515115611e47576040805180820190915260048152636172677360e01b6020820152611de4908290612797565b611ded816127e9565b60005b8360a0015151811015611e3d57611e2d8460a001518281518110611e1657611e16613771565b60200260200101518361279790919063ffffffff16565b611e36816138be565b9050611df0565b50611e478161280d565b60808301515115611f0b57600083602001516002811115611e6a57611e6a6132de565b03611e885760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152611eb9908290612797565b611ed283602001516002811115611d3357611d336132de565b6040805180820190915260078152667365637265747360c81b6020820152611efb908290612797565b6080830151611f0b90829061282b565b60c08301515115611fa45760408051808201909152600981526862797465734172677360b81b6020820152611f41908290612797565b611f4a816127e9565b60005b8360c0015151811015611f9a57611f8a8460c001518281518110611f7357611f73613771565b60200260200101518361282b90919063ffffffff16565b611f93816138be565b9050611f4d565b50611fa48161280d565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612004959493929190613b16565b6020604051808303816000875af1158015612023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120479190613b5f565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b60048301805461ff001916610200179055601080546120aa918491600290811061189857611898613771565b806001600160a01b03167f8d9f1123a8981d98a55c522cc3546e151e783d36ac86b4006002457d90f8a97d83600242604051611aad93929190613b78565b60048301805461ff00191661010017905560108054612114918491600190811061189857611898613771565b806001600160a01b03167f30a03041ed7a449393aa7cc4ba9869de14da67712db4676032bf3ca8f02a573483600142604051611aad93929190613b78565b6007546001600160a01b0316331461129f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107f1565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361225f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107f1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122d7848484611b39565b6122e384848484612838565b6110885760405162461bcd60e51b81526004016107f190613b9a565b606061230a8261195d565b60008281526006602052604081208054612323906137b0565b80601f016020809104026020016040519081016040528092919081815260200182805461234f906137b0565b801561239c5780601f106123715761010080835404028352916020019161239c565b820191906000526020600020905b81548152906001019060200180831161237f57829003601f168201915b5050505050905060006123ba60408051602081019091526000815290565b905080516000036123cc575092915050565b8151156123fe5780826040516020016123e6929190613bec565b60405160208183030381529060405292505050919050565b611b3184612936565b60006040518060c0016040528087815260200185815260200184815260200183815260200160001515815260200160006002811115612448576124486132de565b90526001600160a01b0386166000908152601260209081526040808320805460018181018355918552938390208551600590950201938455918401519183019190915582015160028083019190915560608301516003830155608083015160048301805491151560ff1983168117825560a0860151959650869593919261ff001990911661ffff1990911617906101009084908111156124ea576124ea6132de565b0217905550505060006124fc85611466565b60408051606080820183528882526001600160a01b038a811660208085018281528587018f8152600089815260138452888120805460018082018355918352918590208951600390930201918255925192810180546001600160a01b0319169390961692909217909455925160029093019290925584518d81529182018b9052938101899052908101879052929350917fd01f867d86932c2cfdf1045c284accdcb8565dd727d22f81bae60d43be7a0ab39060800160405180910390a25050505050505050565b6114308282604051806020016040528060008152506129aa565b6000828152600260205260409020546001600160a01b03166126585760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016107f1565b60008281526006602052604090206126708282613952565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160e01b031982166380ac58cd60e01b14806126d957506001600160e01b03198216635b5e139f60e01b145b8061067d57506301ffc9a760e01b6001600160e01b031983161461067d565b805160000361271a576040516322ce3edd60e01b815260040160405180910390fd5b8383600281111561272d5761272d6132de565b90816002811115612740576127406132de565b90525060408401828015612756576127566132de565b90818015612766576127666132de565b9052506060909301929092525050565b61277e613070565b805161278a90836129dd565b5060006020820152919050565b6127a48260038351612a54565b81516108929082612b6d565b81516127bd9060c2612b8e565b5061143082826040516020016127d591815260200190565b60405160208183030381529060405261282b565b6127f4816004612bf7565b600181602001818151612807919061379d565b90525050565b612818816007612bf7565b60018160200181815161280791906138f9565b6127a48260028351612a54565b60006001600160a01b0384163b1561292e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061287c903390899088908890600401613c1b565b6020604051808303816000875af19250505080156128b7575060408051601f3d908101601f191682019092526128b491810190613c4e565b60015b612914573d8080156128e5576040519150601f19603f3d011682016040523d82523d6000602084013e6128ea565b606091505b50805160000361290c5760405162461bcd60e51b81526004016107f190613b9a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b31565b506001611b31565b60606129418261195d565b600061295860408051602081019091526000815290565b9050600081511161297857604051806020016040528060008152506129a3565b8061298284612c0e565b604051602001612993929190613bec565b6040516020818303038152906040525b9392505050565b6129b48383612ca0565b6129c16000848484612838565b6108925760405162461bcd60e51b81526004016107f190613b9a565b6040805180820190915260608152600060208201526129fd6020836138d7565b15612a2557612a0d6020836138d7565b612a189060206138f9565b612a22908361379d565b91505b602080840183905260405180855260008152908184010181811015612a4957600080fd5b604052509192915050565b6017816001600160401b031611612a7a5782516110889060e0600585901b168317612b8e565b60ff816001600160401b031611612aba578251612aa2906018611fe0600586901b1617612b8e565b508251611088906001600160401b0383166001612e2b565b61ffff816001600160401b031611612afb578251612ae3906019611fe0600586901b1617612b8e565b508251611088906001600160401b0383166002612e2b565b63ffffffff816001600160401b031611612b3e578251612b2690601a611fe0600586901b1617612b8e565b508251611088906001600160401b0383166004612e2b565b8251612b5590601b611fe0600586901b1617612b8e565b508251611088906001600160401b0383166008612e2b565b6040805180820190915260608152600060208201526129a383838451612eb0565b6040805180820190915260608152600060208201528251516000612bb382600161379d565b905084602001518210612bd457612bd485612bcf836002613c6b565b612f81565b8451602083820101858153508051821115612bed578181525b5093949350505050565b815161089290601f611fe0600585901b1617612b8e565b60606000612c1b83612f98565b60010190506000816001600160401b03811115612c3a57612c3a61319a565b6040519080825280601f01601f191660200182016040528015612c64576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c6e57509392505050565b6001600160a01b038216612cf65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107f1565b6000818152600260205260409020546001600160a01b031615612d5b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107f1565b6000818152600260205260409020546001600160a01b031615612dc05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107f1565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040805180820190915260608152600060208201528351516000612e4f828561379d565b90508560200151811115612e6c57612e6c86612bcf836002613c6b565b60006001612e7c86610100613d66565b612e8691906138f9565b90508651828101878319825116178152508051831115612ea4578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115612ed357600080fd5b8351516000612ee2848361379d565b90508560200151811115612eff57612eff86612bcf836002613c6b565b855180518382016020019160009180851115612f19578482525b505050602086015b60208610612f595780518252612f3860208361379d565b9150612f4560208261379d565b9050612f526020876138f9565b9550612f21565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151612f8d83836129dd565b506110888382612b6d565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612fd75772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613003576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061302157662386f26fc10000830492506010015b6305f5e1008310613039576305f5e100830492506008015b612710831061304d57612710830492506004015b6064831061305f576064830492506002015b600a831061067d5760010192915050565b6040518060400160405280613098604051806040016040528060608152602001600081525090565b8152602001600081525090565b6001600160e01b03198116811461155f57600080fd5b6000602082840312156130cd57600080fd5b81356129a3816130a5565b6000602082840312156130ea57600080fd5b5035919050565b60005b8381101561310c5781810151838201526020016130f4565b50506000910152565b6000815180845261312d8160208601602086016130f1565b601f01601f19169290920160200192915050565b6020815260006129a36020830184613115565b80356001600160a01b038116811461316b57600080fd5b919050565b6000806040838503121561318357600080fd5b61318c83613154565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156131d8576131d861319a565b604052919050565b60006001600160401b038311156131f9576131f961319a565b61320c601f8401601f19166020016131b0565b905082815283838301111561322057600080fd5b828260208301376000602084830101529392505050565b600082601f83011261324857600080fd5b6129a3838335602085016131e0565b60008060006060848603121561326c57600080fd5b8335925060208401356001600160401b038082111561328a57600080fd5b61329687838801613237565b935060408601359150808211156132ac57600080fd5b506132b986828701613237565b9150509250925092565b6000602082840312156132d557600080fd5b6129a382613154565b634e487b7160e01b600052602160045260246000fd5b6003811061331257634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613388578151805188528381015184890152604080820151908901526060808201519089015260808082015115159089015260a09081015190613373818a01836132f4565b505060c096909601959082019060010161332a565b509495945050505050565b6020815260006129a36020830184613316565b6000806000606084860312156133bb57600080fd5b6133c484613154565b92506133d260208501613154565b9150604084013590509250925092565b60008083601f8401126133f457600080fd5b5081356001600160401b0381111561340b57600080fd5b6020830191508360208260051b850101111561342657600080fd5b9250929050565b6000806020838503121561344057600080fd5b82356001600160401b0381111561345657600080fd5b613462858286016133e2565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156134c357603f198886030184526134b1858351613316565b94509285019290850190600101613495565b5092979650505050505050565b600080604083850312156134e357600080fd5b823591506134f360208401613154565b90509250929050565b60006001600160401b038211156135155761351561319a565b5060051b60200190565b6000602080838503121561353257600080fd5b82356001600160401b0381111561354857600080fd5b8301601f8101851361355957600080fd5b803561356c613567826134fc565b6131b0565b81815260059190911b8201830190838101908783111561358b57600080fd5b928401925b828410156135a957833582529284019290840190613590565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156134c357603f198886030184526135f7858351613115565b945092850192908501906001016135db565b6000806040838503121561361c57600080fd5b61362583613154565b91506020830135801515811461363a57600080fd5b809150509250929050565b6000806000806080858703121561365b57600080fd5b61366485613154565b935061367260208601613154565b92506040850135915060608501356001600160401b0381111561369457600080fd5b6136a087828801613237565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561370157815180518552868101516001600160a01b03168786015285015185850152606090930192908501906001016136c9565b5091979650505050505050565b6000806040838503121561372157600080fd5b61372a83613154565b91506134f360208401613154565b6000806000806080858703121561374e57600080fd5b61375785613154565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561067d5761067d613787565b600181811c908216806137c457607f821691505b6020821081036137e457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000613845613567846134fc565b80848252602080830192508560051b85013681111561386357600080fd5b855b818110156138b25780356001600160401b038111156138845760008081fd5b870136601f8201126138965760008081fd5b6138a43682358684016131e0565b865250938201938201613865565b50919695505050505050565b6000600182016138d0576138d0613787565b5060010190565b6000826138f457634e487b7160e01b600052601260045260246000fd5b500690565b8181038181111561067d5761067d613787565b601f82111561089257600081815260208120601f850160051c810160208610156139335750805b601f850160051c820191505b818110156119305782815560010161393f565b81516001600160401b0381111561396b5761396b61319a565b61397f8161397984546137b0565b8461390c565b602080601f8311600181146139b4576000841561399c5750858301515b600019600386901b1c1916600185901b178555611930565b600085815260208120601f198616915b828110156139e3578886015182559484019460019091019084016139c4565b5085821015613a015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154613a1e816137b0565b808552602060018381168015613a3b5760018114613a5557613a83565b60ff1985168884015283151560051b880183019550613a83565b866000528260002060005b85811015613a7b5781548a8201860152908301908401613a60565b890184019650505b505050505092915050565b606081526000613aa16060830186613a11565b8281036020840152613ab38186613a11565b90508281036040840152613ac78185613a11565b9695505050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160401b038616815260a060208201526000613b3860a0830187613115565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b600060208284031215613b7157600080fd5b5051919050565b83815260608101613b8c60208301856132f4565b826040830152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613bfe8184602088016130f1565b835190830190613c128183602088016130f1565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ac790830184613115565b600060208284031215613c6057600080fd5b81516129a3816130a5565b808202811582820484141761067d5761067d613787565b600181815b80851115613cbd578160001904821115613ca357613ca3613787565b80851615613cb057918102915b93841c9390800290613c87565b509250929050565b600082613cd45750600161067d565b81613ce15750600061067d565b8160018114613cf75760028114613d0157613d1d565b600191505061067d565b60ff841115613d1257613d12613787565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715613d40575081810a61067d565b613d4a8383613c82565b8060001904821115613d5e57613d5e613787565b029392505050565b60006129a38383613cc556fea2646970667358221220666251b99a7ed07540e08d771ef12b9521fdc35be63a515f7db3483e41d6d43e64736f6c6343000814003368747470733a2f2f62616679626569617a7068716a6d366761706c7874677870746a79686b3371617532773576673273696a7770696a74713667746d6b696b687a78652e697066732e7733732e6c696e6b2f52657374617572616e745265736572766174696f6e2e6a736f6e636f6e7374207265736572766174696f6e4964203d20617267735b305d3b636f6e7374207265736572766174696f6e54696d657374616d70203d20617267735b315d3b636f6e7374207461626c654e756d626572203d20617267735b325d3b636f6e7374207265736572766174696f6e44617465203d20617267735b335d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f6c696e6b617461626c652d79616e766963746f72736e732d70726f6a656374732e76657263656c2e6170702f6170692f7265736572766174696f6e73427949643f69643d247b7265736572766174696f6e49647d267265736572766174696f6e54696d657374616d703d247b7265736572766174696f6e54696d657374616d707d267461626c654e756d6265723d247b7461626c654e756d6265727d267265736572766174696f6e446174653d247b7265736572766174696f6e446174657d607d293b69662028617069526573706f6e73652e6572726f7229207b636f6e736f6c652e6572726f7228617069526573706f6e73652e6572726f72293b7468726f77206e6577204572726f72282752657175657374206661696c656427293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b636f6e736f6c652e6c6f67282741504920726573706f6e736520646174613a272c204a534f4e2e737472696e6769667928646174612c206e756c6c2c203229293b636f6e737420656e636f64656454696d657374616d70203d2046756e6374696f6e732e656e636f6465537472696e6728646174612e7265736572766174696f6e54696d657374616d70293b636f6e737420656e636f6465645461626c654e756d626572203d2046756e6374696f6e732e656e636f6465537472696e6728646174612e7265736572766174696f6e5461626c654e756d626572293b72657475726e20656e636f64656454696d657374616d7068747470733a2f2f6261667962656961623369646f68646f6b6768647a6d6a61706f7965653368616f796c68697561656b70663673346776706d36647478696f616e712e697066732e7733732e6c696e6b2f52657374617572616e74526573657276616e74696f6e43616e63656c65642e6a736f6e68747470733a2f2f6261667962656961666f6d6c6b3565626574753464716a6d787a32717032787a653678636769723376336e6432786c7a336432686a6365327863752e697066732e7733732e6c696e6b2f52657374617572616e5265736572766174696f6e436865636b6564496e2e6a736f6ea2646970667358221220d44637ced9ccf52d04ee8f7e19ea00423d6a4f4b2901d428a4ae22b2df1bd2bc64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200009f5760003560e01c8063715018a6116200006e578063715018a6146200010f5780638da5cb5b1462000119578063c70242ad146200013f578063e54e26b91462000167578063f2fde38b146200017e57600080fd5b806318d3ce9614620000a45780633367db8214620000c65780633d0c13b214620000df5780636c9364b214620000f6575b600080fd5b620000ae62000195565b604051620000bd9190620009b9565b60405180910390f35b620000dd620000d736600462000a1e565b620001f9565b005b620000dd620000f036600462000ad9565b62000334565b6200010062000449565b604051620000bd919062000b53565b620000dd62000609565b6000546001600160a01b03165b6040516001600160a01b039091168152602001620000bd565b620001566200015036600462000ad9565b62000621565b604051620000bd9392919062000be2565b620001266200017836600462000c19565b620006e3565b620000dd6200018f36600462000ad9565b6200070e565b60606002805480602002602001604051908101604052809291908181526020018280548015620001ef57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001d0575b5050505050905090565b6000604051620002099062000957565b604051809103906000f08015801562000226573d6000803e3d6000fd5b50604080516060810182523381526001600160a01b038084166020808401828152848601898152600093845260019283905295909220845181549085166001600160a01b031991821617825592519181018054929094169190921617909155915192935083929091906002820190620002a0908262000cc1565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03841690811790915560405190915033907f2ccdca3e1b0543a98b533de078884ff23cf13b32f4bd118fd6afa824728e30a7906200032790879062000d8e565b60405180910390a3505050565b6200033e6200078d565b6001600160a01b038181166000908152600160208190526040909120015416620003af5760405162461bcd60e51b815260206004820152601760248201527f436f6e747261637420646f6573206e6f7420657869737400000000000000000060448201526064015b60405180910390fd5b6001600160a01b038082166000908152600160208190526040822080546001600160a01b03198082168355928201805490931690925592169190620003f8600283018262000965565b50506200040582620007e9565b806001600160a01b0316826001600160a01b03167fa19b3707795056482a17062ff074776527d2f61e6e15a75576409c961cd7397460405160405180910390a35050565b60025460609060008167ffffffffffffffff8111156200046d576200046d62000a08565b604051908082528060200260200182016040528015620004bc57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816200048c5790505b50905060005b828110156200060257600060028281548110620004e357620004e362000da3565b60009182526020808320909101546001600160a01b03908116808452600180845260409485902085516060810187528154851681529181015490931693810193909352600282018054919550929391929184019190620005439062000c33565b80601f0160208091040260200160405190810160405280929190818152602001828054620005719062000c33565b8015620005c25780601f106200059657610100808354040283529160200191620005c2565b820191906000526020600020905b815481529060010190602001808311620005a457829003601f168201915b505050505081525050838381518110620005e057620005e062000da3565b6020026020010181905250508080620005f99062000dcf565b915050620004c2565b5092915050565b620006136200078d565b6200061f600062000907565b565b60016020819052600091825260409091208054918101546002820180546001600160a01b039485169490921692916200065a9062000c33565b80601f0160208091040260200160405190810160405280929190818152602001828054620006889062000c33565b8015620006d95780601f10620006ad57610100808354040283529160200191620006d9565b820191906000526020600020905b815481529060010190602001808311620006bb57829003601f168201915b5050505050905083565b60028181548110620006f457600080fd5b6000918252602090912001546001600160a01b0316905081565b620007186200078d565b6001600160a01b0381166200077f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003a6565b6200078a8162000907565b50565b6000546001600160a01b031633146200061f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003a6565b60025460005b818110156200090257826001600160a01b03166002828154811062000818576200081862000da3565b6000918252602090912001546001600160a01b031603620008ed5760026200084260018462000deb565b8154811062000855576200085562000da3565b600091825260209091200154600280546001600160a01b03909216918390811062000884576200088462000da3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480620008c657620008c662000e07565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b80620008f98162000dcf565b915050620007ef565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6146498062000e1e83390190565b508054620009739062000c33565b6000825580601f1062000984575050565b601f0160209004906000526020600020908101906200078a91905b80821115620009b557600081556001016200099f565b5090565b6020808252825182820181905260009190848201906040850190845b81811015620009fc5783516001600160a01b031683529284019291840191600101620009d5565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000a3157600080fd5b813567ffffffffffffffff8082111562000a4a57600080fd5b818401915084601f83011262000a5f57600080fd5b81358181111562000a745762000a7462000a08565b604051601f8201601f19908116603f0116810190838211818310171562000a9f5762000a9f62000a08565b8160405282815287602084870101111562000ab957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121562000aec57600080fd5b81356001600160a01b038116811462000b0457600080fd5b9392505050565b6000815180845260005b8181101562000b335760208185018101518683018201520162000b15565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101562000bd457888303603f19018552815180516001600160a01b039081168552888201511688850152860151606087850181905262000bbf8186018362000b0b565b96890196945050509086019060010162000b7a565b509098975050505050505050565b6001600160a01b0384811682528316602082015260606040820181905260009062000c109083018462000b0b565b95945050505050565b60006020828403121562000c2c57600080fd5b5035919050565b600181811c9082168062000c4857607f821691505b60208210810362000c6957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200090257600081815260208120601f850160051c8101602086101562000c985750805b601f850160051c820191505b8181101562000cb95782815560010162000ca4565b505050505050565b815167ffffffffffffffff81111562000cde5762000cde62000a08565b62000cf68162000cef845462000c33565b8462000c6f565b602080601f83116001811462000d2e576000841562000d155750858301515b600019600386901b1c1916600185901b17855562000cb9565b600085815260208120601f198616915b8281101562000d5f5788860151825594840194600190910190840162000d3e565b508582101562000d7e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600062000b04602083018462000b0b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000de45762000de462000db9565b5060010190565b8181038181111562000e015762000e0162000db9565b92915050565b634e487b7160e01b600052603160045260246000fdfe600c8054750bb8b83e47c2bc239b3bf370bc41e1459a34b41238d06001600160e01b0319909116179055600e805463ffffffff1916620493e01790557f66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000600f556101a0604052606c61010081815260a091829190620042046101203981526020016040518060a0016040528060748152602001620045d56074913981526020016040518060a001604052806075815260200162004560607591399052620000cb906010906003620001f1565b506040518061032001604052806102f08152602001620042706102f09139601190620000f890826200036d565b503480156200010657600080fd5b50600c5460408051808201825260078152665265736572766560c81b602080830191909152825180840190935260038352622929ab60e91b908301526001600160a01b03909216919060006200015d83826200036d565b5060016200016c82826200036d565b50505062000189620001836200019b60201b60201c565b6200019f565b6001600160a01b031660805262000439565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200023c579160200282015b828111156200023c57825182906200022b90826200036d565b509160200191906001019062000212565b506200024a9291506200024e565b5090565b808211156200024a5760006200026582826200026f565b506001016200024e565b5080546200027d90620002de565b6000825580601f106200028e575050565b601f016020900490600052602060002090810190620002ae9190620002b1565b50565b5b808211156200024a5760008155600101620002b2565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002f357607f821691505b6020821081036200031457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036857600081815260208120601f850160051c81016020861015620003435750805b601f850160051c820191505b8181101562000364578281556001016200034f565b5050505b505050565b81516001600160401b03811115620003895762000389620002c8565b620003a1816200039a8454620002de565b846200031a565b602080601f831160018114620003d95760008415620003c05750858301515b600019600386901b1c1916600185901b17855562000364565b600085815260208120601f198616915b828110156200040a57888601518255948401946001909101908401620003e9565b5085821015620004295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613da86200045c600039600081816108a20152611fb10152613da86000f3fe6080604052600436106101f95760003560e01c80636cc8d8cf1161010d578063b1e21749116100a0578063c87b56dd1161006f578063c87b56dd146105a9578063cfb5a921146105c9578063e985e9c5146105f6578063f2fde38b1461063f578063faa07ec11461065f57600080fd5b8063b1e217491461053e578063b88d4fde14610554578063b9d3ab8414610574578063bd4cf3501461059457600080fd5b80638d75aed6116100dc5780638d75aed6146104d85780638da5cb5b146104eb57806395d89b4114610509578063a22cb4651461051e57600080fd5b80636cc8d8cf146104565780636ff3043c1461048357806370a08231146104a3578063715018a6146104c357600080fd5b806323b872dd116101905780634c8f60a31161015f5780634c8f60a3146103b45780634d2e03a0146103d457806357b6f1a1146103e95780636352211e14610416578063642521c51461043657600080fd5b806323b872dd1461034a5780633944ea3a1461036a57806342842e0e1461037f5780634b0795a81461039f57600080fd5b8063095ea7b3116101cc578063095ea7b3146102bb5780630ca76175146102dd578063132a98c0146102fd57806313ff7e9f1461032a57600080fd5b806301ffc9a7146101fe5780630377153f1461023357806306fdde0314610261578063081812fc14610283575b600080fd5b34801561020a57600080fd5b5061021e6102193660046130bb565b610672565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e3660046130d8565b610683565b60405190815260200161022a565b34801561026d57600080fd5b506102766106c4565b60405161022a9190613141565b34801561028f57600080fd5b506102a361029e3660046130d8565b610756565b6040516001600160a01b03909116815260200161022a565b3480156102c757600080fd5b506102db6102d6366004613170565b61077d565b005b3480156102e957600080fd5b506102db6102f8366004613257565b610897565b34801561030957600080fd5b5061031d6103183660046132c3565b61091b565b60405161022a9190613393565b34801561033657600080fd5b5061031d6103453660046132c3565b6109fd565b34801561035657600080fd5b506102db6103653660046133a6565b610ad4565b34801561037657600080fd5b50610276610b05565b34801561038b57600080fd5b506102db61039a3660046133a6565b610b93565b3480156103ab57600080fd5b50610276610bae565b3480156103c057600080fd5b506102536103cf36600461342d565b610bbb565b3480156103e057600080fd5b50610276610cf7565b3480156103f557600080fd5b5061040961040436600461342d565b610d04565b60405161022a919061346e565b34801561042257600080fd5b506102a36104313660046130d8565b610ea7565b34801561044257600080fd5b506102db6104513660046134d0565b610f07565b34801561046257600080fd5b5061047661047136600461351f565b61108e565b60405161022a91906135b4565b34801561048f57600080fd5b506102db61049e3660046134d0565b611146565b3480156104af57600080fd5b506102536104be3660046132c3565b611207565b3480156104cf57600080fd5b506102db61128d565b6102db6104e63660046134d0565b6112a1565b3480156104f757600080fd5b506007546001600160a01b03166102a3565b34801561051557600080fd5b50610276611416565b34801561052a57600080fd5b506102db610539366004613609565b611425565b34801561054a57600080fd5b5061025360085481565b34801561056057600080fd5b506102db61056f366004613645565b611434565b34801561058057600080fd5b5061025361058f3660046130d8565b611466565b3480156105a057600080fd5b506102db61147f565b3480156105b557600080fd5b506102766105c43660046130d8565b611562565b3480156105d557600080fd5b506105e96105e43660046130d8565b61156d565b60405161022a91906136ac565b34801561060257600080fd5b5061021e61061136600461370e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561064b57600080fd5b506102db61065a3660046132c3565b6115f7565b6102db61066d366004613738565b61166d565b600061067d82611938565b92915050565b3360009081526012602052604081208054839081106106a4576106a4613771565b90600052602060002090600502016001015462278d0061067d919061379d565b6060600080546106d3906137b0565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff906137b0565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b5050505050905090565b60006107618261195d565b506000908152600460205260409020546001600160a01b031690565b600061078882610ea7565b9050806001600160a01b0316836001600160a01b0316036107fa5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061081657506108168133610611565b6108885760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107f1565b61089283836119bc565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e05760405163c6829f8360e01b815260040160405180910390fd5b6108eb838383611a2a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6001600160a01b0381166000908152601260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109f25760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a085019261010090920416908111156109ce576109ce6132de565b60028111156109df576109df6132de565b8152505081526020019060010190610953565b505050509050919050565b6001600160a01b0381166000908152601260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109f25760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a08501926101009092041690811115610ab057610ab06132de565b6002811115610ac157610ac16132de565b8152505081526020019060010190610a35565b610ade3382611aba565b610afa5760405162461bcd60e51b81526004016107f1906137ea565b610892838383611b39565b60098054610b12906137b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e906137b0565b8015610b8b5780601f10610b6057610100808354040283529160200191610b8b565b820191906000526020600020905b815481529060010190602001808311610b6e57829003601f168201915b505050505081565b61089283838360405180602001604052806000815250611434565b600a8054610b12906137b0565b6000610bfe6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610c9b60118054610c0e906137b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3a906137b0565b8015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b505050505082611c9d90919063ffffffff16565b8215610cb557610cb5610cae8486613837565b8290611caa565b610cea610cc182611cd4565b600c54600e54600f54600160a01b9092046001600160401b03169163ffffffff90911690611fac565b6008819055949350505050565b600d8054610b12906137b0565b60606000826001600160401b03811115610d2057610d2061319a565b604051908082528060200260200182016040528015610d5357816020015b6060815260200190600190039081610d3e5790505b50905060005b83811015610e9f5760126000868684818110610d7757610d77613771565b9050602002016020810190610d8c91906132c3565b6001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e6b5760008481526020908190206040805160c08101825260058602909201805483526001810154938301939093526002808401549183019190915260038301546060830152600483015460ff8082161515608085015292939260a08501926101009092041690811115610e4757610e476132de565b6002811115610e5857610e586132de565b8152505081526020019060010190610dcc565b50505050828281518110610e8157610e81613771565b60200260200101819052508080610e97906138be565b915050610d59565b509392505050565b6000818152600260205260408120546001600160a01b03168061067d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107f1565b6001600160a01b0381166000908152601260205260408120805484908110610f3157610f31613771565b906000526020600020906005020190508060030154471015610f8c5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016107f1565b60026004820154610100900460ff166002811115610fac57610fac6132de565b14610ff95760405162461bcd60e51b815260206004820152601c60248201527f5265736572766174696f6e206d7573742062652063616e63656c65640000000060448201526064016107f1565b600481015460ff166110585760405162461bcd60e51b815260206004820152602260248201527f5265736572766174696f6e206d757374206265207061696420746f20726566756044820152611b9960f21b60648201526084016107f1565b6003810154604051309180156108fc02916000818181858888f19350505050158015611088573d6000803e3d6000fd5b50505050565b6060600082516001600160401b038111156110ab576110ab61319a565b6040519080825280602002602001820160405280156110de57816020015b60608152602001906001900390816110c95790505b50905060005b835181101561113f5761110f84828151811061110257611102613771565b6020026020010151611562565b82828151811061112157611121613771565b60200260200101819052508080611137906138be565b9150506110e4565b5092915050565b6001600160a01b0381166000908152601260205260409020546111ab5760405162461bcd60e51b815260206004820152601f60248201527f5573657220646f6e2774206861766520616e79207265736572766174696f6e0060448201526064016107f1565b6001600160a01b03811660009081526012602052604081208054849081106111d5576111d5613771565b9060005260206000209060050201905042816002015410156111fc5761089281848461207e565b6108928184846120e8565b60006001600160a01b0382166112715760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107f1565b506001600160a01b031660009081526003602052604090205490565b611295612152565b61129f60006121ac565b565b3360009081526012602052604081208054849081106112c2576112c2613771565b90600052602060002090600502019050816001600160a01b0316336001600160a01b0316146113435760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746865207265736572766174696f6e20686f6c6465722063616e2060448201526619195c1bdcda5d60ca1b60648201526084016107f1565b806003015434146113af5760405162461bcd60e51b815260206004820152603060248201527f4465706f7369742076616c7565206d75737420626520657175616c20746f207260448201526f65736572766174696f6e2076616c756560801b60648201526084016107f1565b600481015460ff16156114045760405162461bcd60e51b815260206004820152601860248201527f5265736572766174696f6e20616c72656164792070616964000000000000000060448201526064016107f1565b600401805460ff191660011790555050565b6060600180546106d3906137b0565b6114303383836121fe565b5050565b61143e3383611aba565b61145a5760405162461bcd60e51b81526004016107f1906137ea565b611088848484846122cc565b600061147562015180836138d7565b61067d90836138f9565b611487612152565b60006013600061149642611466565b8152602081019190915260400160002054111561129f5760005b601360006114bd42611466565b815260208101919091526040016000205481101561155f576000601360006114e442611466565b8152602001908152602001600020828154811061150357611503613771565b60009182526020918290206040805160608101825260039093029091018054835260018101546001600160a01b03169383018490526002015490820181905290925061154e91611146565b50611558816138be565b90506114b0565b50565b606061067d826122ff565b606060136000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109f25760008481526020908190206040805160608101825260038602909201805483526001808201546001600160a01b0316848601526002909101549183019190915290835290920191016115a2565b6115ff612152565b6001600160a01b0381166116645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107f1565b61155f816121ac565b4283116116d05760405162461bcd60e51b815260206004820152602b60248201527f5265736572766174696f6e2074696d657374616d70206d75737420626520696e60448201526a207468652066757475726560a81b60648201526084016107f1565b803410156117325760405162461bcd60e51b815260206004820152602960248201527f496e73756666696369656e742066756e647320746f20636f766572206d696e74604482015268696e6720707269636560b81b60648201526084016107f1565b600082116117905760405162461bcd60e51b815260206004820152602560248201527f546f6c6572616e63652074696d65206d75737420626520677265617465722074604482015264068616e20360dc1b60648201526084016107f1565b600081116117f15760405162461bcd60e51b815260206004820152602860248201527f5265736572766174696f6e2076616c7565206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016107f1565b6001600160a01b0384166118405760405162461bcd60e51b8152602060048201526016602482015275496e7365727420612076616c6964206164647265737360501b60448201526064016107f1565b600061184b600b5490565b905061185b600b80546001019055565b6000611867848661379d565b90506118768287878487612407565b61188086836125c3565b61193082601060008154811061189857611898613771565b9060005260206000200180546118ad906137b0565b80601f01602080910402602001604051908101604052809291908181526020018280546118d9906137b0565b80156119265780601f106118fb57610100808354040283529160200191611926565b820191906000526020600020905b81548152906001019060200180831161190957829003601f168201915b50505050506125dd565b505050505050565b60006001600160e01b03198216632483248360e11b148061067d575061067d826126a8565b6000818152600260205260409020546001600160a01b031661155f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107f1565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119f182610ea7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b8260085414611a4f5760405163d068bf5b60e01b8152600481018490526024016107f1565b6009611a5b8382613952565b50600d611a688382613952565b50600a611a758282613952565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50600d6009600a604051611aad93929190613a8e565b60405180910390a2505050565b600080611ac683610ea7565b9050806001600160a01b0316846001600160a01b03161480611b0d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611b315750836001600160a01b0316611b2684610756565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b4c82610ea7565b6001600160a01b031614611b725760405162461bcd60e51b81526004016107f190613ad1565b6001600160a01b038216611bd45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107f1565b826001600160a01b0316611be782610ea7565b6001600160a01b031614611c0d5760405162461bcd60e51b81526004016107f190613ad1565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61143082600080846126f8565b8051600003611ccc5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000611ce3610100612776565b9050611d1c6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261279790919063ffffffff16565b8251611d3a906002811115611d3357611d336132de565b82906127b0565b6040805180820190915260088152676c616e677561676560c01b6020820152611d64908290612797565b6040830151611d7b908015611d3357611d336132de565b604080518082019091526006815265736f7572636560d01b6020820152611da3908290612797565b6060830151611db3908290612797565b60a08301515115611e47576040805180820190915260048152636172677360e01b6020820152611de4908290612797565b611ded816127e9565b60005b8360a0015151811015611e3d57611e2d8460a001518281518110611e1657611e16613771565b60200260200101518361279790919063ffffffff16565b611e36816138be565b9050611df0565b50611e478161280d565b60808301515115611f0b57600083602001516002811115611e6a57611e6a6132de565b03611e885760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152611eb9908290612797565b611ed283602001516002811115611d3357611d336132de565b6040805180820190915260078152667365637265747360c81b6020820152611efb908290612797565b6080830151611f0b90829061282b565b60c08301515115611fa45760408051808201909152600981526862797465734172677360b81b6020820152611f41908290612797565b611f4a816127e9565b60005b8360c0015151811015611f9a57611f8a8460c001518281518110611f7357611f73613771565b60200260200101518361282b90919063ffffffff16565b611f93816138be565b9050611f4d565b50611fa48161280d565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401612004959493929190613b16565b6020604051808303816000875af1158015612023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120479190613b5f565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b60048301805461ff001916610200179055601080546120aa918491600290811061189857611898613771565b806001600160a01b03167f8d9f1123a8981d98a55c522cc3546e151e783d36ac86b4006002457d90f8a97d83600242604051611aad93929190613b78565b60048301805461ff00191661010017905560108054612114918491600190811061189857611898613771565b806001600160a01b03167f30a03041ed7a449393aa7cc4ba9869de14da67712db4676032bf3ca8f02a573483600142604051611aad93929190613b78565b6007546001600160a01b0316331461129f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107f1565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361225f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107f1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122d7848484611b39565b6122e384848484612838565b6110885760405162461bcd60e51b81526004016107f190613b9a565b606061230a8261195d565b60008281526006602052604081208054612323906137b0565b80601f016020809104026020016040519081016040528092919081815260200182805461234f906137b0565b801561239c5780601f106123715761010080835404028352916020019161239c565b820191906000526020600020905b81548152906001019060200180831161237f57829003601f168201915b5050505050905060006123ba60408051602081019091526000815290565b905080516000036123cc575092915050565b8151156123fe5780826040516020016123e6929190613bec565b60405160208183030381529060405292505050919050565b611b3184612936565b60006040518060c0016040528087815260200185815260200184815260200183815260200160001515815260200160006002811115612448576124486132de565b90526001600160a01b0386166000908152601260209081526040808320805460018181018355918552938390208551600590950201938455918401519183019190915582015160028083019190915560608301516003830155608083015160048301805491151560ff1983168117825560a0860151959650869593919261ff001990911661ffff1990911617906101009084908111156124ea576124ea6132de565b0217905550505060006124fc85611466565b60408051606080820183528882526001600160a01b038a811660208085018281528587018f8152600089815260138452888120805460018082018355918352918590208951600390930201918255925192810180546001600160a01b0319169390961692909217909455925160029093019290925584518d81529182018b9052938101899052908101879052929350917fd01f867d86932c2cfdf1045c284accdcb8565dd727d22f81bae60d43be7a0ab39060800160405180910390a25050505050505050565b6114308282604051806020016040528060008152506129aa565b6000828152600260205260409020546001600160a01b03166126585760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016107f1565b60008281526006602052604090206126708282613952565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160e01b031982166380ac58cd60e01b14806126d957506001600160e01b03198216635b5e139f60e01b145b8061067d57506301ffc9a760e01b6001600160e01b031983161461067d565b805160000361271a576040516322ce3edd60e01b815260040160405180910390fd5b8383600281111561272d5761272d6132de565b90816002811115612740576127406132de565b90525060408401828015612756576127566132de565b90818015612766576127666132de565b9052506060909301929092525050565b61277e613070565b805161278a90836129dd565b5060006020820152919050565b6127a48260038351612a54565b81516108929082612b6d565b81516127bd9060c2612b8e565b5061143082826040516020016127d591815260200190565b60405160208183030381529060405261282b565b6127f4816004612bf7565b600181602001818151612807919061379d565b90525050565b612818816007612bf7565b60018160200181815161280791906138f9565b6127a48260028351612a54565b60006001600160a01b0384163b1561292e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061287c903390899088908890600401613c1b565b6020604051808303816000875af19250505080156128b7575060408051601f3d908101601f191682019092526128b491810190613c4e565b60015b612914573d8080156128e5576040519150601f19603f3d011682016040523d82523d6000602084013e6128ea565b606091505b50805160000361290c5760405162461bcd60e51b81526004016107f190613b9a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b31565b506001611b31565b60606129418261195d565b600061295860408051602081019091526000815290565b9050600081511161297857604051806020016040528060008152506129a3565b8061298284612c0e565b604051602001612993929190613bec565b6040516020818303038152906040525b9392505050565b6129b48383612ca0565b6129c16000848484612838565b6108925760405162461bcd60e51b81526004016107f190613b9a565b6040805180820190915260608152600060208201526129fd6020836138d7565b15612a2557612a0d6020836138d7565b612a189060206138f9565b612a22908361379d565b91505b602080840183905260405180855260008152908184010181811015612a4957600080fd5b604052509192915050565b6017816001600160401b031611612a7a5782516110889060e0600585901b168317612b8e565b60ff816001600160401b031611612aba578251612aa2906018611fe0600586901b1617612b8e565b508251611088906001600160401b0383166001612e2b565b61ffff816001600160401b031611612afb578251612ae3906019611fe0600586901b1617612b8e565b508251611088906001600160401b0383166002612e2b565b63ffffffff816001600160401b031611612b3e578251612b2690601a611fe0600586901b1617612b8e565b508251611088906001600160401b0383166004612e2b565b8251612b5590601b611fe0600586901b1617612b8e565b508251611088906001600160401b0383166008612e2b565b6040805180820190915260608152600060208201526129a383838451612eb0565b6040805180820190915260608152600060208201528251516000612bb382600161379d565b905084602001518210612bd457612bd485612bcf836002613c6b565b612f81565b8451602083820101858153508051821115612bed578181525b5093949350505050565b815161089290601f611fe0600585901b1617612b8e565b60606000612c1b83612f98565b60010190506000816001600160401b03811115612c3a57612c3a61319a565b6040519080825280601f01601f191660200182016040528015612c64576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c6e57509392505050565b6001600160a01b038216612cf65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107f1565b6000818152600260205260409020546001600160a01b031615612d5b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107f1565b6000818152600260205260409020546001600160a01b031615612dc05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107f1565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6040805180820190915260608152600060208201528351516000612e4f828561379d565b90508560200151811115612e6c57612e6c86612bcf836002613c6b565b60006001612e7c86610100613d66565b612e8691906138f9565b90508651828101878319825116178152508051831115612ea4578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115612ed357600080fd5b8351516000612ee2848361379d565b90508560200151811115612eff57612eff86612bcf836002613c6b565b855180518382016020019160009180851115612f19578482525b505050602086015b60208610612f595780518252612f3860208361379d565b9150612f4560208261379d565b9050612f526020876138f9565b9550612f21565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151612f8d83836129dd565b506110888382612b6d565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612fd75772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613003576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061302157662386f26fc10000830492506010015b6305f5e1008310613039576305f5e100830492506008015b612710831061304d57612710830492506004015b6064831061305f576064830492506002015b600a831061067d5760010192915050565b6040518060400160405280613098604051806040016040528060608152602001600081525090565b8152602001600081525090565b6001600160e01b03198116811461155f57600080fd5b6000602082840312156130cd57600080fd5b81356129a3816130a5565b6000602082840312156130ea57600080fd5b5035919050565b60005b8381101561310c5781810151838201526020016130f4565b50506000910152565b6000815180845261312d8160208601602086016130f1565b601f01601f19169290920160200192915050565b6020815260006129a36020830184613115565b80356001600160a01b038116811461316b57600080fd5b919050565b6000806040838503121561318357600080fd5b61318c83613154565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156131d8576131d861319a565b604052919050565b60006001600160401b038311156131f9576131f961319a565b61320c601f8401601f19166020016131b0565b905082815283838301111561322057600080fd5b828260208301376000602084830101529392505050565b600082601f83011261324857600080fd5b6129a3838335602085016131e0565b60008060006060848603121561326c57600080fd5b8335925060208401356001600160401b038082111561328a57600080fd5b61329687838801613237565b935060408601359150808211156132ac57600080fd5b506132b986828701613237565b9150509250925092565b6000602082840312156132d557600080fd5b6129a382613154565b634e487b7160e01b600052602160045260246000fd5b6003811061331257634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613388578151805188528381015184890152604080820151908901526060808201519089015260808082015115159089015260a09081015190613373818a01836132f4565b505060c096909601959082019060010161332a565b509495945050505050565b6020815260006129a36020830184613316565b6000806000606084860312156133bb57600080fd5b6133c484613154565b92506133d260208501613154565b9150604084013590509250925092565b60008083601f8401126133f457600080fd5b5081356001600160401b0381111561340b57600080fd5b6020830191508360208260051b850101111561342657600080fd5b9250929050565b6000806020838503121561344057600080fd5b82356001600160401b0381111561345657600080fd5b613462858286016133e2565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156134c357603f198886030184526134b1858351613316565b94509285019290850190600101613495565b5092979650505050505050565b600080604083850312156134e357600080fd5b823591506134f360208401613154565b90509250929050565b60006001600160401b038211156135155761351561319a565b5060051b60200190565b6000602080838503121561353257600080fd5b82356001600160401b0381111561354857600080fd5b8301601f8101851361355957600080fd5b803561356c613567826134fc565b6131b0565b81815260059190911b8201830190838101908783111561358b57600080fd5b928401925b828410156135a957833582529284019290840190613590565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156134c357603f198886030184526135f7858351613115565b945092850192908501906001016135db565b6000806040838503121561361c57600080fd5b61362583613154565b91506020830135801515811461363a57600080fd5b809150509250929050565b6000806000806080858703121561365b57600080fd5b61366485613154565b935061367260208601613154565b92506040850135915060608501356001600160401b0381111561369457600080fd5b6136a087828801613237565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561370157815180518552868101516001600160a01b03168786015285015185850152606090930192908501906001016136c9565b5091979650505050505050565b6000806040838503121561372157600080fd5b61372a83613154565b91506134f360208401613154565b6000806000806080858703121561374e57600080fd5b61375785613154565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561067d5761067d613787565b600181811c908216806137c457607f821691505b6020821081036137e457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000613845613567846134fc565b80848252602080830192508560051b85013681111561386357600080fd5b855b818110156138b25780356001600160401b038111156138845760008081fd5b870136601f8201126138965760008081fd5b6138a43682358684016131e0565b865250938201938201613865565b50919695505050505050565b6000600182016138d0576138d0613787565b5060010190565b6000826138f457634e487b7160e01b600052601260045260246000fd5b500690565b8181038181111561067d5761067d613787565b601f82111561089257600081815260208120601f850160051c810160208610156139335750805b601f850160051c820191505b818110156119305782815560010161393f565b81516001600160401b0381111561396b5761396b61319a565b61397f8161397984546137b0565b8461390c565b602080601f8311600181146139b4576000841561399c5750858301515b600019600386901b1c1916600185901b178555611930565b600085815260208120601f198616915b828110156139e3578886015182559484019460019091019084016139c4565b5085821015613a015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154613a1e816137b0565b808552602060018381168015613a3b5760018114613a5557613a83565b60ff1985168884015283151560051b880183019550613a83565b866000528260002060005b85811015613a7b5781548a8201860152908301908401613a60565b890184019650505b505050505092915050565b606081526000613aa16060830186613a11565b8281036020840152613ab38186613a11565b90508281036040840152613ac78185613a11565b9695505050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160401b038616815260a060208201526000613b3860a0830187613115565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b600060208284031215613b7157600080fd5b5051919050565b83815260608101613b8c60208301856132f4565b826040830152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613bfe8184602088016130f1565b835190830190613c128183602088016130f1565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ac790830184613115565b600060208284031215613c6057600080fd5b81516129a3816130a5565b808202811582820484141761067d5761067d613787565b600181815b80851115613cbd578160001904821115613ca357613ca3613787565b80851615613cb057918102915b93841c9390800290613c87565b509250929050565b600082613cd45750600161067d565b81613ce15750600061067d565b8160018114613cf75760028114613d0157613d1d565b600191505061067d565b60ff841115613d1257613d12613787565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715613d40575081810a61067d565b613d4a8383613c82565b8060001904821115613d5e57613d5e613787565b029392505050565b60006129a38383613cc556fea2646970667358221220666251b99a7ed07540e08d771ef12b9521fdc35be63a515f7db3483e41d6d43e64736f6c6343000814003368747470733a2f2f62616679626569617a7068716a6d366761706c7874677870746a79686b3371617532773576673273696a7770696a74713667746d6b696b687a78652e697066732e7733732e6c696e6b2f52657374617572616e745265736572766174696f6e2e6a736f6e636f6e7374207265736572766174696f6e4964203d20617267735b305d3b636f6e7374207265736572766174696f6e54696d657374616d70203d20617267735b315d3b636f6e7374207461626c654e756d626572203d20617267735b325d3b636f6e7374207265736572766174696f6e44617465203d20617267735b335d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f6c696e6b617461626c652d79616e766963746f72736e732d70726f6a656374732e76657263656c2e6170702f6170692f7265736572766174696f6e73427949643f69643d247b7265736572766174696f6e49647d267265736572766174696f6e54696d657374616d703d247b7265736572766174696f6e54696d657374616d707d267461626c654e756d6265723d247b7461626c654e756d6265727d267265736572766174696f6e446174653d247b7265736572766174696f6e446174657d607d293b69662028617069526573706f6e73652e6572726f7229207b636f6e736f6c652e6572726f7228617069526573706f6e73652e6572726f72293b7468726f77206e6577204572726f72282752657175657374206661696c656427293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b636f6e736f6c652e6c6f67282741504920726573706f6e736520646174613a272c204a534f4e2e737472696e6769667928646174612c206e756c6c2c203229293b636f6e737420656e636f64656454696d657374616d70203d2046756e6374696f6e732e656e636f6465537472696e6728646174612e7265736572766174696f6e54696d657374616d70293b636f6e737420656e636f6465645461626c654e756d626572203d2046756e6374696f6e732e656e636f6465537472696e6728646174612e7265736572766174696f6e5461626c654e756d626572293b72657475726e20656e636f64656454696d657374616d7068747470733a2f2f6261667962656961623369646f68646f6b6768647a6d6a61706f7965653368616f796c68697561656b70663673346776706d36647478696f616e712e697066732e7733732e6c696e6b2f52657374617572616e74526573657276616e74696f6e43616e63656c65642e6a736f6e68747470733a2f2f6261667962656961666f6d6c6b3565626574753464716a6d787a32717032787a653678636769723376336e6432786c7a336432686a6365327863752e697066732e7733732e6c696e6b2f52657374617572616e5265736572766174696f6e436865636b6564496e2e6a736f6ea2646970667358221220d44637ced9ccf52d04ee8f7e19ea00423d6a4f4b2901d428a4ae22b2df1bd2bc64736f6c63430008140033",
  "devdoc": {
    "author": "@YanVictorSN",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeReservationContract(address)": {
        "params": {
          "contractAddress": "The address of the contract to revoke"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Reservation Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ReservationContractDeployed(address,address,string)": {
        "notice": "Events///"
      }
    },
    "kind": "user",
    "methods": {
      "createReservationContract(string)": {
        "notice": "Creates a new Reservation contract for each company"
      },
      "deployedContracts(address)": {
        "notice": "Variables///"
      },
      "getAllContracts()": {
        "notice": "Returns all contracts deployed"
      },
      "getAllDeployedContracts()": {
        "notice": "Returns detailed information of all deployed contracts"
      },
      "revokeReservationContract(address)": {
        "notice": "Revokes a deployed reservation contract"
      }
    },
    "notice": "This contract is a factory for the Reservation NFTs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2075,
        "contract": "contracts/ReservationFactory.sol:ReservationFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6742,
        "contract": "contracts/ReservationFactory.sol:ReservationFactory",
        "label": "deployedContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(ReservationContract)6736_storage)"
      },
      {
        "astId": 6745,
        "contract": "contracts/ReservationFactory.sol:ReservationFactory",
        "label": "allContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(ReservationContract)6736_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReservationFactory.ReservationContract)",
        "numberOfBytes": "32",
        "value": "t_struct(ReservationContract)6736_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ReservationContract)6736_storage": {
        "encoding": "inplace",
        "label": "struct ReservationFactory.ReservationContract",
        "members": [
          {
            "astId": 6731,
            "contract": "contracts/ReservationFactory.sol:ReservationFactory",
            "label": "companyAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6733,
            "contract": "contracts/ReservationFactory.sol:ReservationFactory",
            "label": "contractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6735,
            "contract": "contracts/ReservationFactory.sol:ReservationFactory",
            "label": "companyName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}